import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import json
import os

st.set_page_config(
    page_title="–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º",
    page_icon="üß¨",
)

selections = ["EliteSelection", "RouletteWheel", "StochasticUniversalSampling", "Tournament"]
mutations = ["DisplacementMutation", "InsertionMutation", "ReverseSequenceMutation", "TworsMutation"]
crossovers = ["CycleCrossover", "OnePointCrossover", "OrderBasedCrossover", "OrderedCrossover", "PartiallyMappedCrossover",
              "PositionBasedCrossover", "ThreeParentCrossover", "TwoPointCrossover", "UniformCrossover"]
iterations = [10, 100, 1000, 10000]

def load_data(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(filename) as f:
            data = json.load(f)
        if not data:
            st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return None
        return data
    except FileNotFoundError:
        st.write("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

def load_initial_data(selection, mutation, crossover):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ø–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞."""
    folder_path = f'data/initial/{selection}/{mutation}'
    data_list = []
    for filename in os.listdir(folder_path):
        if filename.endswith('.json') and crossover in filename:
            file_path = os.path.join(folder_path, filename)
            data = load_data(file_path)
            if data:
                data_list.append(data)
    return data_list

def display_genetic_algorithm_data(selected_selection, selected_mutation, selected_crossover, selected_iterations, algorithm_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ."""
    distance = algorithm_data['Distance']
    time_in_sec = algorithm_data['Data']['TimeInSec']
    fitness = algorithm_data['Data']['Fintess']
    
    st.subheader("–î–∞–Ω–Ω—ã–µ")
    st.write(f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance}")
    st.write(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫): {time_in_sec}")
    st.write(f"–§–∏—Ç–Ω–µ—Å: {fitness}")

def display_initial_data(selected_selection, selected_mutation, selected_crossover, initial_data_list):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã."""
    st.subheader("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.write(f"–ú–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞: {selected_selection}")
    st.write(f"–ú—É—Ç–∞—Ü–∏—è: {selected_mutation}")
    st.write(f"–ö—Ä–æ—Å—Å–æ–≤–µ—Ä: {selected_crossover}")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ 'Selection' –∫ selected_selection, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not selected_selection.endswith('Selection'):
        selected_selection += 'Selection'
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
    df_list = []
    for data in initial_data_list:
        if data.get('Selection') == selected_selection and data.get('Mutation') == selected_mutation and data.get('Crossover') == selected_crossover:
            for indicator in data.get('NumericalIndicators', []):
                df_list.append({
                    'GenerationCount': indicator.get('GenerationCount', None),
                    'TimeInSec': indicator.get('TimeInSec', None),
                    'Fitness': indicator.get('Fintess', None),
                    'Distance': indicator.get('Distance', None)
                })
    
    if not df_list:
        st.write("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∞ –≤—ã–±–æ—Ä–∞, –º—É—Ç–∞—Ü–∏–∏ –∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        df = pd.DataFrame(df_list)
        st.dataframe(df, use_container_width=True)

def plot_best_results_comparison(best_results, selected_mutation, selected_crossover):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –≤—ã–±–æ—Ä–∞."""
    data = {
        'Iterations': iterations,
    }

    for selection, selection_data in best_results.items():
        distances = []
        for iteration in iterations:
            distance = selection_data.get(selected_mutation, {}).get(selected_crossover, {}).get(str(iteration), {}).get('Distance', None)
            distances.append(distance)
        data[selection] = distances

    df = pd.DataFrame(data)

    st.subheader("–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –≤—ã–±–æ—Ä–∞")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    plt.style.use('ggplot')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å ggplot
    
    fig, ax = plt.subplots(figsize=(12, 5))  # –£–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É –≥—Ä–∞—Ñ–∏–∫–∞
    
    for selection in selections:
        ax.plot(df['Iterations'], df[selection], marker='o', label=selection)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–∫ –æ—Å–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    ax.set_xlabel('–ò—Ç–µ—Ä–∞—Ü–∏–∏', fontsize=14)
    ax.set_ylabel('–î–∏—Å—Ç–∞–Ω—Ü–∏—è', fontsize=14)
    ax.set_title(f'–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –≤—ã–±–æ—Ä–∞\n(–ú—É—Ç–∞—Ü–∏—è: {selected_mutation}, –ö—Ä–æ—Å—Å–æ–≤–µ—Ä: {selected_crossover})', fontsize=16)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏
    ax.grid(True, linestyle='--', alpha=0.7)
    
    ax.legend(fontsize=12)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    st.pyplot(fig)

def plot_comparison(selected_methods, selected_mutations, selected_crossovers):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, –º—É—Ç–∞—Ü–∏–π –∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–æ–≤."""
    data = {
        'Iterations': iterations,
    }

    for method in selected_methods:
        for mutation in selected_mutations:
            for crossover in selected_crossovers:
                distances = []
                for iteration in iterations:
                    filename = f'data/best/best_results_{method}.json'
                    data_dict = load_data(filename)
                    if data_dict:
                        distance = data_dict.get(mutation, {}).get(crossover, {}).get(str(iteration), {}).get('Distance', None)
                        distances.append(distance)
                data[f'{method}_{mutation}_{crossover}'] = distances

    df = pd.DataFrame.from_dict(data, orient='index').transpose()

    st.subheader("–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, –º—É—Ç–∞—Ü–∏–π –∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–æ–≤")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    plt.style.use('ggplot')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å ggplot
    
    fig, ax = plt.subplots(figsize=(12, 5))  # –£–º–µ–Ω—å—à–∞–µ–º —à–∏—Ä–∏–Ω—É –≥—Ä–∞—Ñ–∏–∫–∞
    
    for column in df.columns:
        if column != 'Iterations':
            ax.plot(df['Iterations'], df[column], marker='o', label=column)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–∫ –æ—Å–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    ax.set_xlabel('–ò—Ç–µ—Ä–∞—Ü–∏–∏', fontsize=14)
    ax.set_ylabel('–î–∏—Å—Ç–∞–Ω—Ü–∏—è', fontsize=14)
    ax.set_title('–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, –º—É—Ç–∞—Ü–∏–π –∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–æ–≤', fontsize=16)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏
    ax.grid(True, linestyle='--', alpha=0.7)
    
    ax.legend(fontsize=12)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    st.pyplot(fig)

def main():
    global selected_iterations
    st.title("–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")
    
    selected_selection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞:", selections)
    selected_mutation = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º—É—Ç–∞—Ü–∏—é:", mutations)
    selected_crossover = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä:", crossovers)
    st.divider()
    st.header("–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    selected_iterations = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π:", iterations)
    filename = f'data/best/best_results_{selected_selection}.json'
    data = load_data(filename)

    if data:
        algorithm_data = data.get(selected_mutation, {}).get(selected_crossover, {}).get(str(selected_iterations))
        if algorithm_data:
            display_genetic_algorithm_data(selected_selection, selected_mutation, selected_crossover, selected_iterations, algorithm_data)
        else:
            st.write(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {selected_selection}, {selected_mutation}, {selected_crossover} —Å {selected_iterations} –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    st.divider()
    st.header("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    initial_data_list = load_initial_data(selected_selection, selected_mutation, selected_crossover)
    if initial_data_list:
        display_initial_data(selected_selection, selected_mutation, selected_crossover, initial_data_list)
    else:
        st.write(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {selected_selection}, {selected_mutation} –∏ {selected_crossover} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    st.divider()
    st.header("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    selected_mutation_for_comparison = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º—É—Ç–∞—Ü–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", mutations)
    selected_crossover_for_comparison = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", crossovers)
    
    best_results = {}
    for selection in selections:
        filename = f'data/best/best_results_{selection}.json'
        data = load_data(filename)
        if data:
            best_results[selection] = data

    if best_results:
        plot_best_results_comparison(best_results, selected_mutation_for_comparison, selected_crossover_for_comparison)
    else:
        st.write("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –≤—ã–±–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    st.divider()
    st.header("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, –º—É—Ç–∞—Ü–∏–π –∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–æ–≤")
    
    selected_methods = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥—ã –≤—ã–±–æ—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", selections)
    selected_mutations = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –º—É—Ç–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", mutations)
    selected_crossovers = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", crossovers)
    
    if selected_methods and selected_mutations and selected_crossovers:
        plot_comparison(selected_methods, selected_mutations, selected_crossovers)
    else:
        st.write("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞, –æ–¥–Ω—É –º—É—Ç–∞—Ü–∏—é –∏ –æ–¥–∏–Ω –∫—Ä–æ—Å—Å–æ–≤–µ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")

if __name__ == "__main__":
    main()