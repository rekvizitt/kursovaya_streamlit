import streamlit as st
import json
import os

st.set_page_config(
    page_title="–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º",
    page_icon="üß¨",
)

selections = ["EliteSelection", "RouletteWheel", "StochasticUniversalSampling", "Tournament"]
mutations = ["DisplacementMutation", "InsertionMutation", "ReverseSequenceMutation", "TworsMutation"]
crossovers = ["CycleCrossover", "OnePointCrossover", "OrderBasedCrossover", "OrderedCrossover", "PartiallyMappedCrossover",
              "PositionBasedCrossover", "ThreeParentCrossover", "TwoPointCrossover", "UniformCrossover"]
iterations = [10, 100, 1000, 10000]

def load_data(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(filename) as f:
            data = json.load(f)
        if not data:
            st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return None
        return data
    except FileNotFoundError:
        st.write("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

def load_initial_data(selection, mutation):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ø–∫–∏."""
    folder_path = f'data/initial/{selection}/{mutation}'
    data_list = []
    for filename in os.listdir(folder_path):
        if filename.endswith('.json'):
            file_path = os.path.join(folder_path, filename)
            data = load_data(file_path)
            if data:
                data_list.append(data)
    return data_list

def display_genetic_algorithm_data(selected_selection, selected_mutation, selected_crossover, selected_iterations, algorithm_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ."""
    distance = algorithm_data['Distance']
    time_in_sec = algorithm_data['Data']['TimeInSec']
    fitness = algorithm_data['Data']['Fintess']
    
    st.subheader("–î–∞–Ω–Ω—ã–µ")
    st.write(f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance}")
    st.write(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫): {time_in_sec}")
    st.write(f"–§–∏—Ç–Ω–µ—Å: {fitness}")

def display_initial_data(selected_selection, selected_mutation, selected_crossover, selected_file, initial_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    st.subheader("–î–∞–Ω–Ω—ã–µ")
    st.write(f"–§–∞–π–ª: {selected_file}")
    st.write(f"–ú–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞: {selected_selection}")
    st.write(f"–ú—É—Ç–∞—Ü–∏—è: {selected_mutation}")
    st.write(f"–ö—Ä–æ—Å—Å–æ–≤–µ—Ä: {selected_crossover}")
    st.write(f"–î–∞–Ω–Ω—ã–µ:")
    st.write(initial_data)

def main():
    global selected_iterations
    st.title("–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")
    
    selected_selection = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞:", selections)
    selected_mutation = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º—É—Ç–∞—Ü–∏—é:", mutations)
    selected_crossover = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä:", crossovers)
    st.divider()
    st.header("–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    selected_iterations = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π:", iterations)
    filename = f'data/best/best_results_{selected_selection}.json'
    data = load_data(filename)

    if data:
        algorithm_data = data.get(selected_mutation, {}).get(selected_crossover, {}).get(str(selected_iterations))
        if algorithm_data:
            display_genetic_algorithm_data(selected_selection, selected_mutation, selected_crossover, selected_iterations, algorithm_data)
        else:
            st.write(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {selected_selection}, {selected_mutation}, {selected_crossover} —Å {selected_iterations} –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    st.divider()
    st.header("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    initial_data_list = load_initial_data(selected_selection, selected_mutation)
    if initial_data_list:
        selected_file = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:", [f"{i+1}" for i in range(len(initial_data_list))])
        selected_data = initial_data_list[int(selected_file) - 1]
        display_initial_data(selected_selection, selected_mutation, selected_crossover, selected_file, selected_data)
    else:
        st.write(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {selected_selection} –∏ {selected_mutation} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

if __name__ == "__main__":
    main()