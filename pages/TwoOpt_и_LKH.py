import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import json
import os
import datetime

st.set_page_config(
    page_title="TwoOpt –∏ LKH",
    page_icon="üü•",
)

algorithms = ["TwoOpt", "Lkh"]
iterations = [10, 100, 1000]

def load_data(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(filename) as f:
            data = json.load(f)
        if not data:
            st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return None
        return data
    except FileNotFoundError:
        st.write("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

def load_initial_data(algorithm, iterations):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ø–∫–∏."""
    folder_path = f'data/initial/{algorithm}/{iterations}'
    data_list = []
    for filename in os.listdir(folder_path):
        if filename.endswith('.json'):
            file_path = os.path.join(folder_path, filename)
            data = load_data(file_path)
            if data:
                data_list.append(data)
    return data_list

def display_algorithm_data(selected_algorithm, algorithm_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ª–≥–æ—Ä–∏—Ç–º–µ."""
    total_sum = algorithm_data['TotalSum']
    elapsed_milliseconds = algorithm_data['ElapsedMilliseconds']
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É
    elapsed_time = str(datetime.timedelta(milliseconds=elapsed_milliseconds))
    
    st.subheader("–î–∞–Ω–Ω—ã–µ")
    st.write(f"–°—É–º–º–∞: {total_sum}")
    st.write(f"–ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {elapsed_time}")

def plot_costs(selected_algorithm, costs, repeat=None):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è Costs."""
    df = pd.DataFrame({
        'Index': range(len(costs)),
        'Costs': costs
    })

    st.subheader("–ì—Ä–∞—Ñ–∏–∫ Costs –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    plt.style.use('ggplot')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å ggplot
    
    fig, ax = plt.subplots(figsize=(15, 6))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –≥—Ä–∞—Ñ–∏–∫–∞
    ax.plot(df['Index'], df['Costs'], marker='o', color='royalblue', label='Costs', markersize=6, linewidth=2)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–∫ –æ—Å–µ–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    ax.set_xlabel('–ò–Ω–¥–µ–∫—Å', fontsize=14)
    ax.set_ylabel('Costs', fontsize=14)
    if repeat:
        ax.set_title(f'–ì—Ä–∞—Ñ–∏–∫ Costs –¥–ª—è {selected_algorithm}, {selected_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π, {repeat} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ', fontsize=16)
    else:
        ax.set_title(f'–ì—Ä–∞—Ñ–∏–∫ Costs –¥–ª—è {selected_algorithm}, {selected_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π', fontsize=16)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏
    ax.grid(True, linestyle='--', alpha=0.7)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
    for i, cost in enumerate(costs):
        ax.annotate(f'{cost}', xy=(i, cost), textcoords="offset points", xytext=(0,10), ha='center', fontsize=8)

    ax.legend(fontsize=12)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    st.pyplot(fig)

def main():
    global selected_iterations
    st.title("–ê–ª–≥–æ—Ä–∏—Ç–º—ã TwoOpt –∏ LKH")
    
    selected_algorithm = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º:", algorithms)
    st.divider()
    st.header("–õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    selected_iterations = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π:", iterations)

    if selected_algorithm == "TwoOpt":
        filename = 'data/best/best_solutions_2opt.json'
    elif selected_algorithm == "Lkh":
        filename = 'data/best/best_solutions_LKH.json'

    data = load_data(filename)

    if data:
        algorithm_data = data['BestSolutions'].get(str(selected_iterations))
        if algorithm_data:
            display_algorithm_data(selected_algorithm, algorithm_data)
            plot_costs(selected_algorithm, algorithm_data['Costs'])
        else:
            st.write(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {selected_algorithm} —Å {selected_iterations} –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    st.divider()
    st.header("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    initial_data = load_initial_data(selected_algorithm.lower(), selected_iterations)
    if initial_data:
        selected_file = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–∞):", [f"{i+1}" for i in range(len(initial_data))])
        repeat = int(selected_file)
        selected_data = initial_data[repeat - 1]
        display_algorithm_data(selected_algorithm, selected_data)
        plot_costs(selected_algorithm, selected_data['Costs'], repeat)
    else:
        st.write(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {selected_algorithm} —Å {selected_iterations} –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

if __name__ == "__main__":
    main()